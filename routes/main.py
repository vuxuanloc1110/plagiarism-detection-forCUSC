# from flask import Blueprint, request, render_template, redirect, url_for, flash
# import os
# from werkzeug.utils import secure_filename

# from config import UPLOAD_FOLDER
# from services.search import search_similar_sentences, search_similar_sentences_txt
# from services.indexer import index_file

# main = Blueprint('main', __name__)
# ALLOWED_EXTENSIONS = {'txt', 'docx'}

# # ‚úÖ H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng file
# def allowed_file(filename):
#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# # ‚úÖ Route 1: Trang ch√≠nh ki·ªÉm tra ƒë·∫°o vƒÉn
# @main.route("/", methods=["GET", "POST"])
# def index():
#     doc_content = ""
#     sentences = []
#     results = []

#     if request.method == "POST":
#         if "file" not in request.files:
#             return redirect(request.url)

#         file = request.files["file"]
#         if file.filename == "":
#             return redirect(request.url)

#         if file and allowed_file(file.filename):
#             filename = secure_filename(file.filename)
#             file_path = os.path.join(UPLOAD_FOLDER, filename)
#             os.makedirs(UPLOAD_FOLDER, exist_ok=True)
#             file.save(file_path)

#             try:
#                 if filename.endswith(".docx"):
#                     doc_content, results = search_similar_sentences(file_path)
#                 elif filename.endswith(".txt"):
#                     doc_content, results = search_similar_sentences_txt(file_path)
#                 else:
#                     return render_template("index.html", error="ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng t·∫£i l√™n file .docx ho·∫∑c .txt")

#                 sentences = doc_content.split("\n") if doc_content else []

#             except Exception as e:
#                 print(f"L·ªói khi x·ª≠ l√Ω file: {e}")
#                 doc_content, sentences, results = "", [], []

#     return render_template("index.html", doc_content=doc_content, sentences=sentences, results=results)

# # ‚úÖ Route 2: Upload nhi·ªÅu file ƒë·ªÉ index v√†o Elasticsearch
# @main.route("/upload-index", methods=["GET", "POST"])
# def upload_index():
#     if request.method == "POST":
#         if "files" not in request.files:
#             flash("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn")
#             return redirect(request.url)

#         files = request.files.getlist("files")
#         if not files or all(f.filename == '' for f in files):
#             flash("Ch∆∞a ch·ªçn file h·ª£p l·ªá")
#             return redirect(request.url)

#         indexed = 0
#         for file in files:
#             if file and allowed_file(file.filename):
#                 filename = secure_filename(file.filename)
#                 save_path = os.path.join("Project/download_tailieuvn_text", filename)
#                 os.makedirs(os.path.dirname(save_path), exist_ok=True)
#                 file.save(save_path)
#                 index_file(save_path, filename)
#                 indexed += 1

#         flash(f"‚úÖ ƒê√£ upload v√† index {indexed} file v√†o     Elasticsearch!")
#         return redirect(url_for("main.upload_index"))

#     return render_template("upload_index.html")
from fastapi import APIRouter, Request, UploadFile, File
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates  
import os
import aiofiles

from config import UPLOAD_FOLDER
from services.search import search_similar_sentences, search_similar_sentences_txt
from services.indexer import index_file

templates = Jinja2Templates(directory="templates")
router = APIRouter()

ALLOWED_EXTENSIONS = {"txt", "docx"}

def allowed_file(filename):
    ext = filename.rsplit('.', 1)[-1].lower()
    print("üîç Extension:", ext)
    return ext in ALLOWED_EXTENSIONS

# ‚úÖ Route GET: hi·ªÉn th·ªã giao di·ªán ch√≠nh
@router.get("/", response_class=HTMLResponse)
async def index_get(request: Request):
    return templates.TemplateResponse("index.html", {
        "request": request,
        "doc_content": "",
        "sentences": [],
        "results": []
    })

# ‚úÖ Route POST: x·ª≠ l√Ω file ƒë·∫°o vƒÉn
from fastapi.responses import RedirectResponse
from starlette.status import HTTP_303_SEE_OTHER
from fastapi import Form

upload_cache = {}  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u t·∫°m k·∫øt qu·∫£ (c√≥ th·ªÉ thay b·∫±ng session)

@router.post("/", response_class=HTMLResponse)
async def index_post(
    request: Request,
    file: UploadFile = File(...),
    mode: str = Form(...)
):
    if not file.filename or not allowed_file(file.filename):
        return templates.TemplateResponse("index.html", {
            "request": request,
            "error": "‚ùå T·ªáp kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ªáp .docx ho·∫∑c .txt",
            "doc_content": "",
            "sentences": [],
            "results": []
        })

    filename = file.filename
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)

    async with aiofiles.open(file_path, 'wb') as out_file:
        content = await file.read()
        await out_file.write(content)

    try:
        if filename.endswith(".docx"):
            doc_content, results = await search_similar_sentences(file_path, mode=mode)
        else:
            doc_content, results = await search_similar_sentences_txt(file_path, mode=mode)

        sentences = doc_content.split("\n") if doc_content else []

        # L∆∞u t·∫°m k·∫øt qu·∫£
        upload_cache["doc_content"] = doc_content
        upload_cache["sentences"] = sentences
        upload_cache["results"] = results

        return RedirectResponse(url="/result", status_code=HTTP_303_SEE_OTHER)

    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")
        return templates.TemplateResponse("index.html", {
            "request": request,
            "error": "‚ùå L·ªói x·ª≠ l√Ω file",
            "doc_content": "",
            "sentences": [],
            "results": []
        })
@router.get("/result", response_class=HTMLResponse)
async def show_result(request: Request):
    return templates.TemplateResponse("index.html", {
        "request": request,
        "doc_content": upload_cache.get("doc_content", ""),
        "sentences": upload_cache.get("sentences", []),
        "results": upload_cache.get("results", [])
    })
@router.get("/upload-index", response_class=HTMLResponse)
async def upload_index_get(request: Request):
    return templates.TemplateResponse("upload_index.html", {"request": request})

@router.post("/upload-index", response_class=HTMLResponse)
async def upload_index_post(request: Request, files: list[UploadFile] = File(...)):
    if not files or all(not f.filename for f in files):
        return templates.TemplateResponse("upload_index.html", {
            "request": request,
            "message": "‚ùå Ch∆∞a ch·ªçn file h·ª£p l·ªá"
        })

    indexed = 0
    for file in files:
        if file and allowed_file(file.filename):
            filename = file.filename
            save_path = os.path.join("Project/download_tailieuvn_text", filename)
            os.makedirs(os.path.dirname(save_path), exist_ok=True)

            async with aiofiles.open(save_path, 'wb') as out_file:
                content = await file.read()
                await out_file.write(content)

            index_file(save_path, filename)
            indexed += 1

    return templates.TemplateResponse("upload_index.html", {
        "request": request,
        "message": f"‚úÖ ƒê√£ upload v√† index {indexed} file v√†o Elasticsearch!"
    })
